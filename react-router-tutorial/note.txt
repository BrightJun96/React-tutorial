기존에 라우팅을 할 때에는 경로별 페이지(예)html문서)를 할당해줘야했다.
이는 페이지 전환할 때마다 서버에서 문서를 가져와야하기때문에 로딩이 걸릴 수 있다는 단점이 있다.

하지만 리액트 라우터는 SPA로서 자바스크립트파일로 한번에 로딩을 해와서 서버에서 가져올 필요없이
경로별 컴포넌트를 보여주면 되기 때문에 로딩시간이 걸린다는 기존 단점을 해결해줄 수 있다.

라우팅된 컴포넌트를 포함한 다른 컴포넌트도 가져와진다?


react router는 history api를 기반으로 작동한다.

> web, server, react native에서 작동한다.

* history api는 무엇인가?
새로고침하지 않고도 주소를 변경해준다.


* server side routing?
ref : https://betterprogramming.pub/react-router-and-client-side-routing-2e483452fbf

* 파리미터?

* 쿼리?

* match , location , history 객체란?
router로 사용된 컴포넌트에 전달되는 props들

* withRouter
Hoc로써 인자로 컴포넌트를 할당해주면 해당 컴포넌트는 router에 쓰인 컴포넌트처럼
match , location, history 객체를 사용할 수 있다.

* NavLink

* Hashrouter












> 책으로 전체적인 개념을 살피고 공식문서 참조


> router를 쓰기위해서는 최상위 컴포넌트에 BrowserRouter로 감싸줘야한다.

> Route는 Routes로 감싸줘야함.

> Link는 해당 경로로 이동하게 해주는 태그 (a태그와 비슷함.)
a태그와 차이점은 a태그는 해당 경로로 이동하면 페이지를 다시 불러오게 됨.
이럴 경우에는 기존에 렌더링했던 부분들이 날라가고 다시 렌더링을 해줘야함.

하지만 Link태그는 새로 불러오지않고 해당 컴포넌트만 불러와줌.
즉 , 페이지 전환 방지 기능을 가지고 있음.


> paramter
url의 parameter는 match객체에서 조회할 수 있다.
url의 paramter에 입력하고 라우팅했을 때
해당 parameter가 match라는 객체에 전달된다.
그리고 그 paramter는 match.params로 조회하면 된다.

match 객체 : 현재 컴포넌트가 어떤 경로 규칙에 의해 보이는지에 대한 정보가 들어있음.

> query
쿼리는 location객체에서 조회할 수 있다.
